import { useState, useEffect, useCallback } from 'react';\nimport type { Chambre, Cite } from \"../../shared/types\";\n\nconst STORAGE_KEYS = {\n  CHAMBRES: 'studyrooms_chambres',\n  CITES: 'studyrooms_cites',\n  SETTINGS: 'studyrooms_settings'\n};\n\n// Service de stockage local\nexport class LocalStorageService {\n  // Gestion des chambres\n  static getChambres(): Chambre[] {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.CHAMBRES);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Erreur lors de la lecture des chambres:', error);\n      return [];\n    }\n  }\n\n  static saveChambres(chambres: Chambre[]): boolean {\n    try {\n      localStorage.setItem(STORAGE_KEYS.CHAMBRES, JSON.stringify(chambres));\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde des chambres:', error);\n      return false;\n    }\n  }\n\n  static ajouterChambre(chambre: Chambre): boolean {\n    try {\n      const chambres = this.getChambres();\n      // Générer un ID unique\n      const nouvelleChambre = { ...chambre, id: Date.now().toString() };\n      chambres.push(nouvelleChambre);\n      return this.saveChambres(chambres);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de la chambre:', error);\n      return false;\n    }\n  }\n\n  static modifierChambre(id: string, chambreModifiee: Partial<Chambre>): boolean {\n    try {\n      const chambres = this.getChambres();\n      const index = chambres.findIndex(c => c.id === id);\n      if (index !== -1) {\n        chambres[index] = { ...chambres[index], ...chambreModifiee };\n        return this.saveChambres(chambres);\n      }\n      return false;\n    } catch (error) {\n      console.error('Erreur lors de la modification de la chambre:', error);\n      return false;\n    }\n  }\n\n  static supprimerChambre(id: string): boolean {\n    try {\n      const chambres = this.getChambres();\n      const nouveauxChambres = chambres.filter(c => c.id !== id);\n      return this.saveChambres(nouveauxChambres);\n    } catch (error) {\n      console.error('Erreur lors de la suppression de la chambre:', error);\n      return false;\n    }\n  }\n\n  // Gestion des cités\n  static getCites(): Cite[] {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEYS.CITES);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Erreur lors de la lecture des cités:', error);\n      return [];\n    }\n  }\n\n  static saveCites(cites: Cite[]): boolean {\n    try {\n      localStorage.setItem(STORAGE_KEYS.CITES, JSON.stringify(cites));\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de la sauvegarde des cités:', error);\n      return false;\n    }\n  }\n\n  static ajouterCite(cite: Cite): boolean {\n    try {\n      const cites = this.getCites();\n      // Générer un ID unique\n      const nouvelleCite = { ...cite, id: Date.now().toString() };\n      cites.push(nouvelleCite);\n      return this.saveCites(cites);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de la cité:', error);\n      return false;\n    }\n  }\n\n  static modifierCite(id: string, citeModifiee: Partial<Cite>): boolean {\n    try {\n      const cites = this.getCites();\n      const index = cites.findIndex(c => c.id === id);\n      if (index !== -1) {\n        cites[index] = { ...cites[index], ...citeModifiee };\n        return this.saveCites(cites);\n      }\n      return false;\n    } catch (error) {\n      console.error('Erreur lors de la modification de la cité:', error);\n      return false;\n    }\n  }\n\n  static supprimerCite(id: string): boolean {\n    try {\n      const cites = this.getCites();\n      const nouvellesCites = cites.filter(c => c.id !== id);\n      return this.saveCites(nouvellesCites);\n    } catch (error) {\n      console.error('Erreur lors de la suppression de la cité:', error);\n      return false;\n    }\n  }\n\n  // Initialisation avec les données par défaut\n  static initialiserDonneesParDefaut(chambresDefaut: Chambre[], citesDefaut: Cite[]): void {\n    // Vérifier si des données existent déjà\n    const chambresExistantes = this.getChambres();\n    const citesExistantes = this.getCites();\n\n    // Si aucune donnée n'existe, initialiser avec les données par défaut\n    if (chambresExistantes.length === 0) {\n      this.saveChambres(chambresDefaut);\n    }\n\n    if (citesExistantes.length === 0) {\n      this.saveCites(citesDefaut);\n    }\n  }\n\n  // Exporter/Importer les données\n  static exporterDonnees(): string {\n    const data = {\n      chambres: this.getChambres(),\n      cites: this.getCites(),\n      timestamp: new Date().toISOString()\n    };\n    return JSON.stringify(data, null, 2);\n  }\n\n  static importerDonnees(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      if (data.chambres && Array.isArray(data.chambres)) {\n        this.saveChambres(data.chambres);\n      }\n      if (data.cites && Array.isArray(data.cites)) {\n        this.saveCites(data.cites);\n      }\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de l\\'importation des données:', error);\n      return false;\n    }\n  }\n\n  // Nettoyer toutes les données\n  static viderToutesDonnees(): boolean {\n    try {\n      localStorage.removeItem(STORAGE_KEYS.CHAMBRES);\n      localStorage.removeItem(STORAGE_KEYS.CITES);\n      localStorage.removeItem(STORAGE_KEYS.SETTINGS);\n      return true;\n    } catch (error) {\n      console.error('Erreur lors de la suppression des données:', error);\n      return false;\n    }\n  }\n\n  // Statistiques\n  static getStatistiques() {\n    const chambres = this.getChambres();\n    const cites = this.getCites();\n    \n    return {\n      totalChambres: chambres.length,\n      chambresDisponibles: chambres.filter(c => c.disponible).length,\n      totalCites: cites.length,\n      prixMoyen: chambres.length > 0 ? Math.round(chambres.reduce((acc, c) => acc + c.prix, 0) / chambres.length) : 0,\n      superficieMoyenne: chambres.length > 0 ? Math.round(chambres.reduce((acc, c) => acc + c.superficie, 0) / chambres.length) : 0\n    };\n  }\n}\n\n// Hook React pour utiliser le stockage local\nexport function useLocalStorage() {\n  const [chambres, setChambres] = useState<Chambre[]>([]);\n  const [cites, setCites] = useState<Cite[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Charger les données au montage\n  useEffect(() => {\n    setLoading(true);\n    const chambresStockees = LocalStorageService.getChambres();\n    const citesStockees = LocalStorageService.getCites();\n    \n    setChambres(chambresStockees);\n    setCites(citesStockees);\n    setLoading(false);\n  }, []);\n\n  const ajouterChambre = useCallback((chambre: Chambre) => {\n    if (LocalStorageService.ajouterChambre(chambre)) {\n      setChambres(LocalStorageService.getChambres());\n      return true;\n    }\n    return false;\n  }, []);\n\n  const modifierChambre = useCallback((id: string, chambreModifiee: Partial<Chambre>) => {\n    if (LocalStorageService.modifierChambre(id, chambreModifiee)) {\n      setChambres(LocalStorageService.getChambres());\n      return true;\n    }\n    return false;\n  }, []);\n\n  const supprimerChambre = useCallback((id: string) => {\n    if (LocalStorageService.supprimerChambre(id)) {\n      setChambres(LocalStorageService.getChambres());\n      return true;\n    }\n    return false;\n  }, []);\n\n  const ajouterCite = useCallback((cite: Cite) => {\n    if (LocalStorageService.ajouterCite(cite)) {\n      setCites(LocalStorageService.getCites());\n      return true;\n    }\n    return false;\n  }, []);\n\n  const modifierCite = useCallback((id: string, citeModifiee: Partial<Cite>) => {\n    if (LocalStorageService.modifierCite(id, citeModifiee)) {\n      setCites(LocalStorageService.getCites());\n      return true;\n    }\n    return false;\n  }, []);\n\n  const supprimerCite = useCallback((id: string) => {\n    if (LocalStorageService.supprimerCite(id)) {\n      setCites(LocalStorageService.getCites());\n      return true;\n    }\n    return false;\n  }, []);\n\n  return {\n    chambres,\n    cites,\n    loading,\n    ajouterChambre,\n    modifierChambre,\n    supprimerChambre,\n    ajouterCite,\n    modifierCite,\n    supprimerCite,\n    statistiques: LocalStorageService.getStatistiques(),\n    exporterDonnees: LocalStorageService.exporterDonnees,\n    importerDonnees: LocalStorageService.importerDonnees,\n    viderToutesDonnees: () => {\n      if (LocalStorageService.viderToutesDonnees()) {\n        setChambres([]);\n        setCites([]);\n        return true;\n      }\n      return false;\n    }\n  };\n}